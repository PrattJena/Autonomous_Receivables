[{"/home/pratt/Documents/HRC/Summer_Internship_UI/src/index.js":"1","/home/pratt/Documents/HRC/Summer_Internship_UI/src/App.js":"2","/home/pratt/Documents/HRC/Summer_Internship_UI/src/serviceWorker.js":"3","/home/pratt/Documents/HRC/Summer_Internship_UI/src/utils/theme.js":"4","/home/pratt/Documents/HRC/Summer_Internship_UI/src/utils/constants.js":"5","/home/pratt/Documents/HRC/Summer_Internship_UI/src/views/CollectorDashboard.js":"6","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/Footer.js":"7","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/Header.js":"8","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/GridPanel.js":"9","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/GridHeader.js":"10","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/GridTable.js":"11","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/GridPanelHeader.js":"12","/home/pratt/Documents/HRC/Summer_Internship_UI/src/utils/buttons.js":"13","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/DatePicker.js":"14","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/InvoiceTable.js":"15","/home/pratt/Documents/HRC/Summer_Internship_UI/src/services/fetchApi.js":"16","/home/pratt/Documents/HRC/Summer_Internship_UI/src/actions/fetchActions.js":"17","/home/pratt/Documents/HRC/Summer_Internship_UI/src/reportWebVitals.js":"18","/home/pratt/Documents/HRC/Summer_Internship_UI/src/reducers/rootReducer.js":"19","/home/pratt/Documents/HRC/Summer_Internship_UI/src/reducers/fetchDataReducer.js":"20","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/EnhancedTableHead.js":"21","/home/pratt/Documents/HRC/Summer_Internship_UI/src/reducers/checkBoxReducer.js":"22","/home/pratt/Documents/HRC/Summer_Internship_UI/src/actions/checkboxActions.js":"23","/home/pratt/Documents/HRC/Summer_Internship_UI/src/reducers/addFormReducer.js":"24","/home/pratt/Documents/HRC/Summer_Internship_UI/src/actions/addFormActions.js":"25","/home/pratt/Documents/HRC/Summer_Internship_UI/src/utils/formatter.js":"26","/home/pratt/Documents/HRC/Summer_Internship_UI/src/reducers/searchBarReducer.js":"27","/home/pratt/Documents/HRC/Summer_Internship_UI/src/actions/searchBarAction.js":"28","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/NoResults.js":"29","/home/pratt/Documents/HRC/Summer_Internship_UI/src/utils/FacebookLoader.js":"30","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/CorrespondenceDetails.js":"31","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/ViewCorrespondence.js":"32","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/EditModal.js":"33","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/DeleteModal.js":"34","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/AddModal.js":"35","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/AltCorrespondenceDetails.js":"36"},{"size":1378,"mtime":1615955600105,"results":"37","hashOfConfig":"38"},{"size":1403,"mtime":1616513522038,"results":"39","hashOfConfig":"38"},{"size":5226,"mtime":1589284046000,"results":"40","hashOfConfig":"38"},{"size":4934,"mtime":1616482943773,"results":"41","hashOfConfig":"38"},{"size":144,"mtime":1614686480643,"results":"42","hashOfConfig":"38"},{"size":6550,"mtime":1610991214000,"results":"43","hashOfConfig":"38"},{"size":1243,"mtime":1589331156000,"results":"44","hashOfConfig":"38"},{"size":1020,"mtime":1615469281274,"results":"45","hashOfConfig":"38"},{"size":253,"mtime":1615462144192,"results":"46","hashOfConfig":"38"},{"size":526,"mtime":1616267409992,"results":"47","hashOfConfig":"38"},{"size":1227,"mtime":1616480746583,"results":"48","hashOfConfig":"38"},{"size":9424,"mtime":1616506914857,"results":"49","hashOfConfig":"38"},{"size":444,"mtime":1615537529290,"results":"50","hashOfConfig":"38"},{"size":891,"mtime":1616361789001,"results":"51","hashOfConfig":"38"},{"size":6873,"mtime":1616576180031,"results":"52","hashOfConfig":"38"},{"size":341,"mtime":1616049982094,"results":"53","hashOfConfig":"38"},{"size":235,"mtime":1615955521637,"results":"54","hashOfConfig":"38"},{"size":362,"mtime":1610541554000,"results":"55","hashOfConfig":"38"},{"size":430,"mtime":1616230515853,"results":"56","hashOfConfig":"38"},{"size":641,"mtime":1616142329583,"results":"57","hashOfConfig":"38"},{"size":1243,"mtime":1616338842433,"results":"58","hashOfConfig":"38"},{"size":489,"mtime":1616310159343,"results":"59","hashOfConfig":"38"},{"size":149,"mtime":1616310242908,"results":"60","hashOfConfig":"38"},{"size":478,"mtime":1616217134351,"results":"61","hashOfConfig":"38"},{"size":72,"mtime":1616058325338,"results":"62","hashOfConfig":"38"},{"size":2191,"mtime":1591529930000,"results":"63","hashOfConfig":"38"},{"size":341,"mtime":1616252218014,"results":"64","hashOfConfig":"38"},{"size":69,"mtime":1616252236854,"results":"65","hashOfConfig":"38"},{"size":1765,"mtime":1616266784034,"results":"66","hashOfConfig":"38"},{"size":1140,"mtime":1616488494885,"results":"67","hashOfConfig":"38"},{"size":4028,"mtime":1616362673894,"results":"68","hashOfConfig":"38"},{"size":6942,"mtime":1616486397247,"results":"69","hashOfConfig":"38"},{"size":9047,"mtime":1616516487523,"results":"70","hashOfConfig":"38"},{"size":5036,"mtime":1616362676161,"results":"71","hashOfConfig":"38"},{"size":12615,"mtime":1616569125310,"results":"72","hashOfConfig":"38"},{"size":4103,"mtime":1616362669173,"results":"73","hashOfConfig":"38"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"77"},"1suihi9",{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"86"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"86"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"77"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"77"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"108"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"77"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"77"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"77"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"77"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"77"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"77"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"77"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"77"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"77"},"/home/pratt/Documents/HRC/Summer_Internship_UI/src/index.js",["165"],"import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport theme from '../src/utils/theme';\r\nimport { withStyles, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { createStore } from 'redux';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport rootReducer from './reducers/rootReducer';\r\n\r\n\r\nconst store = createStore(\r\n  // instance of store\r\n  rootReducer,\r\n  window.__REDUX_DEVTOOLS_EXTENSION__ &&\r\n    window.__REDUX_DEVTOOLS_EXTENSION__({ trace: true })\r\n);\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n     <MuiThemeProvider theme={theme}>\r\n       <App />\r\n     </MuiThemeProvider>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n/*\r\nCRACKED BY ILLUMINATI\r\nTRUST US AND UNCOMMENT THIS CODE ONCE YOU SETUP YOUR REDUX STORE ;-)\r\n ReactDOM.render(\r\n   <Provider store={store}>\r\n     <MuiThemeProvider theme={theme}>\r\n       <App />\r\n     </MuiThemeProvider>\r\n   </Provider>,\r\n   document.getElementById('root')\r\n );\r\n*/\r\nserviceWorker.unregister();\r\n\r\n\r\n",["166","167"],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/App.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/serviceWorker.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/utils/theme.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/utils/constants.js",[],["168","169"],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/views/CollectorDashboard.js",["170","171","172","173","174"],"import React, { useState } from 'react';\r\nimport theme, { pxToVh } from '../utils/theme';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Footer from '../components/Footer';\r\nimport { Typography } from '@material-ui/core';\r\nimport { InputBase, TextField, OutlinedInput, Button } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    paddingLeft: '1vw',\r\n    paddingRight: '1vw',\r\n  },\r\n  textStyle1: {\r\n    color: '#FFFFFFA6',\r\n    fontSize: '2.5vw',\r\n    marginTop: '2vh',\r\n  },\r\n  textStyle2: {\r\n    color: '#FFFFFFA6',\r\n    fontSize: '1.5vw',\r\n  },\r\n  textfield: {\r\n    color: '#FFFFFFA6',\r\n    fontSize: '1.5vw',\r\n  },\r\n  nameInput: {\r\n    fontSize: '1vw',\r\n    color: '#FFFFFF',\r\n  },\r\n  notchedOutline: { borderWidth: '1px', borderColor: '#5DAAE0 !important' },\r\n  searchBtnStarted: {\r\n    marginTop: '8vh',\r\n    minWidth: '5vw',\r\n    minHeight: '2.188vw',\r\n    fontSize: '0.95vw',\r\n    border: 'solid 0.75px #3B617C',\r\n    // marginRight: '0.5rem',\r\n    alignSelf: 'center',\r\n    color: '#5DAAE0',\r\n    '&:hover': {\r\n      backgroundColor: '#5daae0',\r\n      color: 'white',\r\n    },\r\n  },\r\n  searchBtnDisabled: {\r\n    minWidth: '5vw',\r\n    minHeight: '2.188vw',\r\n    fontSize: '0.95vw',\r\n    border: 'solid 0.75px #3B617C',\r\n    // marginRight: '0.5rem',\r\n    alignSelf: 'center',\r\n    color: 'white !important',\r\n    background: '#FFFFFFa5',\r\n    '&:hover': {\r\n      cursor: 'default',\r\n      backgroundColor: '#FFFFFFa5',\r\n    },\r\n  },\r\n  hellotext: {\r\n    fontSize: '4vw',\r\n    color: '#FFFFFFA6',\r\n    height: '10vh',\r\n  },\r\n  hellotext1: {\r\n    fontSize: '2.5vw',\r\n    marginTop: '5vh',\r\n    padding: '1vh',\r\n    color: '#FFFFFF',\r\n    backgroundColor: '#5DAAE0',\r\n  },\r\n  hellotext3: {\r\n    fontSize: '1vw',\r\n    marginTop: '5vh',\r\n    padding: '0.5vh',\r\n    color: '#FFFFFF',\r\n    backgroundColor: '#5DAAE0',\r\n  },\r\n  hellotext2: {\r\n    fontSize: '1.2vw',\r\n    marginTop: '5vh',\r\n    padding: '1vh',\r\n    color: '#FFFFFF',\r\n    backgroundColor: '#5DAAE0',\r\n  },\r\n  hellotext4: {\r\n    fontSize: '1.5vw',\r\n    marginTop: '2vh',\r\n    padding: '1vh',\r\n    color: '#FFFFFF',\r\n  },\r\n  searchBtn: {\r\n    marginTop: '2vh',\r\n    minWidth: '5vw',\r\n    minHeight: '2.188vw',\r\n    fontSize: '0.95vw',\r\n    border: 'solid 0.75px #3B617C',\r\n    // marginRight: '0.5rem',\r\n    alignSelf: 'center',\r\n    color: '#5DAAE0',\r\n    '&:hover': {\r\n      backgroundColor: '#5daae0',\r\n      color: 'white',\r\n    },\r\n  },\r\n}));\r\n\r\nconst CollectorDashboard = (props) => {\r\n  const [name, setName] = useState('');\r\n  const [started, setStarted] = useState(false);\r\n\r\n  const handleNameChange = (e) => {\r\n    setName(e.target.value);\r\n  };\r\n\r\n  const handleGetStarted = (e) => {\r\n    if (started) setName('');\r\n    setStarted((prev) => !prev);\r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container className={classes.root} spacing={2} xs={12}>\r\n      <Grid\r\n        container\r\n        style={{ height: '95vh' }}\r\n        justify=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        <Grid\r\n          item\r\n          style={{\r\n            height: started ? '90vh' : '45vh',\r\n            width: started ? '60vw' : '40vw',\r\n            backgroundColor: started ? '' : '#252C48',\r\n            display: 'flex',\r\n          }}\r\n          alignItems=\"center\"\r\n          direction=\"column\"\r\n        >\r\n          <Typography className={classes.textStyle1}>\r\n            {started ? `Hello ${name}` : 'Hey There !'}\r\n          </Typography>\r\n          <Typography className={classes.textStyle2}>\r\n            {started\r\n              ? ' WELCOME TO SUMMER INTERNSHIP 2021'\r\n              : `What's your name?`}\r\n          </Typography>\r\n          {!started ? (\r\n            <>\r\n              <TextField\r\n                id=\"outlined-basic\"\r\n                variant=\"outlined\"\r\n                autoid=\"ship-to-input\"\r\n                type=\"text\"\r\n                style={{ marginTop: '4vh' }}\r\n                value={name}\r\n                onChange={handleNameChange}\r\n                InputProps={{\r\n                  classes: {\r\n                    input: classes.nameInput,\r\n                    notchedOutline: classes.notchedOutline,\r\n                  },\r\n                }}\r\n              />\r\n\r\n              <Button\r\n                size=\"small\"\r\n                className={classes.searchBtnStarted}\r\n                classes={{ disabled: classes.searchBtnDisabled }}\r\n                disabled={name == ''}\r\n                onClick={handleGetStarted}\r\n              >\r\n                GET STARTED\r\n              </Button>\r\n            </>\r\n          ) : (\r\n            <>\r\n              <div\r\n                style={{\r\n                  display: 'flex',\r\n                  flexDirection: 'column',\r\n                  alignItems: 'center',\r\n                  justifyContent: 'center',\r\n                  height: '30vh',\r\n                  width: '51vw',\r\n                  marginTop: '5vh',\r\n                  border: 'solid 1px #5daae0',\r\n                }}\r\n              >\r\n                <Button\r\n                  size=\"medium\"\r\n                  className={classes.searchBtn}\r\n                  onClick={handleGetStarted}\r\n                >\r\n                  CLICK HERE TO GET THE COMPLETE SOURCE CODE OF THE PROJECT\r\n                </Button>\r\n                <Button\r\n                  size=\"medium\"\r\n                  className={classes.searchBtn}\r\n                  onClick={handleGetStarted}\r\n                >\r\n                  CLICK HERE TO BRIBE YOUR MODERATOR DURING EVALUATION\r\n                </Button>\r\n\r\n                <Button\r\n                  size=\"medium\"\r\n                  className={classes.searchBtn}\r\n                  onClick={handleGetStarted}\r\n                >\r\n                  CLICK HERE TO GET ALL UPCOMING QUIZ ANSWERS BEFOREHAND\r\n                </Button>\r\n              </div>\r\n              <Typography className={classes.hellotext3}>\r\n                WITH LOTS OF LOVE,\r\n              </Typography>\r\n              <Typography className={classes.hellotext4}>\r\n                Highradius Illuminati\r\n              </Typography>\r\n              <Typography className={classes.hellotext2}>\r\n                THE ILLUMINATI WILL BE THERE WITH YOU ALWAYS...AND WILL HELP YOU\r\n                WHENEVER YOU ARE STUCK. MAY THE FORCE BE WITH YOU\r\n              </Typography>\r\n            </>\r\n          )}\r\n        </Grid>\r\n      </Grid>\r\n      <Footer />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default CollectorDashboard;\r\n","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/Footer.js",["175","176","177"],"import React from 'react';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport theme, { pxToRem } from '../utils/theme';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { Typography, Grid } from '@material-ui/core';\r\n\r\nconst styles = theme => ({\r\n  mainBackground: {\r\n    background: theme.palette.primary.main,\r\n    height: '100vh',\r\n    width: '100vw'\r\n  },\r\n  root: {\r\n    flexGrow: 1\r\n  },\r\n  paper: {\r\n    height: 140,\r\n    width: '100%',\r\n    background: '#252C48',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    flexDirection: 'column'\r\n  },\r\n  titleName: { fontSize: pxToRem(30), color: 'white' },\r\n  subTitleName: {\r\n    fontSize: pxToRem(20),\r\n    color: 'white'\r\n  }\r\n});\r\nfunction Footer(props) {\r\n  const { classes } = props;\r\n  return (\r\n    <Grid\r\n      item\r\n      xs={12}\r\n      style={{\r\n        display: 'flex',\r\n        marginRight: '5px',\r\n        justifyContent: 'flex-end',\r\n        height: \"4.5vh\",\r\n        alignItems: \"flex-end\"\r\n      }}\r\n    >\r\n      <Typography style={{ color: 'white' }}>\r\n        Copyright 2020 Highradius. All Rights Reserved.\r\n      </Typography>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default withStyles(styles, { withTheme: true })(Footer);\r\n","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/Header.js",["178","179"],"import React from 'react'\nimport {makeStyles} from \"@material-ui/core\"\nimport highradiusLogo from \"../assets/logo.svg\"\nimport customerLogo from \"../assets/Group 20399.svg\"\n\n\nconst useStyles = makeStyles({\n    container:{\n        height:\"5.5%\",\n        marginTop: \"1.375rem\",\n        marginLeft:\"1.875rem\",\n        marginRight:\"1.875rem\",\n    },\n    highradius:{\n        display:\"inline\",\n        paddingLeft:\"26.93%\",\n        width:\"12.6%\",\n        opacity: 1,\n    },\n    customerLogo:{\n        display:\"inline\",\n        width:\"16.72%\",\n        opacity: 1,\n    },\n})\n\n\nfunction Header() {\n\n    const classes = useStyles()\n    return (\n        <>\n            <div className={classes.container}>\n                <img className={classes.customerLogo} src = {customerLogo}/>\n                {/* <p className={classes.customerName}>ABCProducts</p> */}\n                <img className={classes.highradius} src = {highradiusLogo}/>\n                \n                \n            </div>\n        </>\n    )\n}\n\nexport default Header\n","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/GridPanel.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/GridHeader.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/GridTable.js",["180"],"import React from 'react'\nimport {makeStyles, Button} from \"@material-ui/core\"\nimport Paper from '@material-ui/core/Paper';\nimport GridPanelHeader from './GridPanelHeader';\nimport InvoiceTable from './InvoiceTable';\n// import Button from '@material-ui/core/Button';\nimport { useSelector } from 'react-redux';\nimport NoResults from './NoResults';\n\nconst useStyles = makeStyles({\n    container:{\n        margin:\"1.875rem\",\n\n    },\n    paper:{\n        display:\"inline-block\",\n        backgroundColor:\"#273D49CC\",\n        borderRadius:\"0.625rem\",\n        width:\"100%\",\n        height:\"80.7vh\",\n        // overflow:\"hidden\"\n    },\n\n})\n\n\nfunction GridTable() {\n\n    const classes = useStyles()\n    const responseData = useSelector(state=>state.fetchData.responseData)\n    const searchTerm = useSelector(state=>state.searchBar.searchTerm)\n\n    return (\n        <div className = {classes.container}>\n            <Paper elevation={0} className={classes.paper}>\n\n                <GridPanelHeader/>\n                {(responseData.filter((val)=>{return String(val.doc_id).includes(searchTerm)}).length===0)&&(searchTerm.length>0)?<NoResults/> : <InvoiceTable/>}     \n            </Paper>  \n        </div>\n    )\n}\n\nexport default GridTable\n","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/GridPanelHeader.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/utils/buttons.js",["181","182"],"import React from 'react'\nimport { colors, Icon } from \"@material-ui/core\";\nimport {ReactComponent as AddIcon} from '../assets/Path 18189.svg'\nimport {makeStyles, SvgIcon} from \"@material-ui/core\"\n\nconst useStyles = makeStyles({\n    fontSize:\"0.875rem\",\n    colors:\"white\"\n})\n\nexport function Add(){\n    const classes = useStyles()\n    return(\n        <SvgIcon className={classes.mySvgStyle}>\n            <AddIcon/>\n        </SvgIcon>\n    )\n}\n\n",["183","184"],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/DatePicker.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/InvoiceTable.js",["185","186","187","188","189","190","191"],"import React from 'react'\nimport PropTypes from 'prop-types';\nimport InfiniteScroll from \"react-infinite-scroll-component\"\nimport {Checkbox,TableContainer,Table,TableRow,TableCell,TableBody,CircularProgress,Paper,makeStyles} from \"@material-ui/core\";\nimport { fetchData } from '../services/fetchApi';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { checkNextPage, increasePage, display } from '../actions/fetchActions';\nimport EnhancedTableHead from './EnhancedTableHead';\nimport { checked, rows } from '../actions/checkboxActions';\nimport { formatter } from '../utils/formatter';\nimport FacebookCircularProgress from '../utils/FacebookLoader';\nimport { pxToRem } from '../utils/theme';\n\n\n\nEnhancedTableHead.propTypes = {\n  classes: PropTypes.object.isRequired,\n  onSelectAllClick: PropTypes.func.isRequired,\n  rowCount: PropTypes.number.isRequired,\n  numSelected: PropTypes.number.isRequired\n};\n\nconst useStyles = makeStyles({\n  scrollBox:{\n    width: \"4.063rem\",\n    height: \"5.063rem\",\n    margin: \"auto\",\n    padding: \"3.125rem\",\n  },\n  loading:{\n    font: \"normal normal normal 1.125rem/1.313rem Ubuntu\",\n    letterSpacing: \"0rem\",\n    color: \"#C0C6CA\",\n    opacity: 1\n  },\n})\n\n\nconst InvoiceTable = () => {\n    \n    const classes = useStyles()\n\n    // const [selected,setSelected] = React.useState([])\n    const selected = useSelector(state=>state.checkBox.checked)\n    const isNext = useSelector(state=>state.fetchData.isNext)\n    const responseData = useSelector(state=>state.fetchData.responseData)\n    const pageNumber = useSelector(state => state.fetchData.pageNumber)\n    const searchTerm = useSelector(state => state.searchBar.searchTerm)\n    const selectedRows = useSelector(state=>state.checkBox.selectedRows)\n    const dispatch = useDispatch()\n    \n\n\n\n    const handleSelectAllClick = (event) => {\n      if (event.target.checked) {\n        const newSelecteds = responseData.map((n) => n.doc_id);\n        dispatch(checked(newSelecteds));\n        return;\n      }\n      dispatch(checked([]));\n    };\n  \n    const handleClick = (event, name) => {\n      const selectedIndex = selected.indexOf(name);\n      let newSelected = [];\n      let newRows = [];\n  \n      if (selectedIndex === -1) {\n        newSelected = newSelected.concat(selected, name);\n      } else if (selectedIndex === 0) {\n        newSelected = newSelected.concat(selected.slice(1));\n      } else if (selectedIndex === selected.length - 1) {\n        newSelected = newSelected.concat(selected.slice(0, -1));\n      } else if (selectedIndex > 0) {\n        newSelected = newSelected.concat(\n          selected.slice(0, selectedIndex),\n          selected.slice(selectedIndex + 1)\n        );\n      }\n\n      newSelected.map((s)=>{\n        const row = responseData.filter((row)=>row.doc_id==s);\n        newRows = newRows.concat(row)\n      })\n      \n      dispatch(rows(newRows))\n      dispatch(checked(newSelected));\n    };    \n\n    const isSelected = (name) => selected.indexOf(name) !== -1; \n\n\n    function fetchMoreData(){\n        dispatch(increasePage(pageNumber+1))\n        if(pageNumber >=1100 )// 50 data coming from database\n        {\n          dispatch(checkNextPage(false))\n        }\n        fetchData(pageNumber).then((data)=>{\n          if(data){\n            dispatch(display([...responseData, ...data]))\n          } else{\n            console.log(\"Some error occured while fetching data\")\n          }\n        })\n    }\n\n    const searchResult = (val)=>{\n      if (searchTerm ==\"\"){\n        return val\n      }\n      else {\n        console.log((val.filter(value=>String(value.doc_id).includes(searchTerm))).length===0)\n        dispatch(checkNextPage(false))\n          return val.filter(value=>String(value.doc_id).includes(searchTerm))\n        }\n        \n      }\n    \n    const dateConversion = (date)=>{\n      var curr_date = date.getDate();\n      var curr_month = date.getMonth(); //Months are zero based\n      var month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\",\n      \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"][curr_month]\n      var curr_year = date.getFullYear();\n      return(curr_date + \"-\" + month + \"-\" + curr_year);\n\n    }\n    \n\n    // didMount phase the isNext will change to true\n    React.useEffect(() => {\n        dispatch(checkNextPage(true))\n        fetchMoreData()\n    }, [])\n\n\n    return (\n    <div style={{width:\"100%\",height:\"86.5%\"}}>\n    <TableContainer\n    id=\"test-table\"\n    component={Paper}\n    style={{\n      height: \"95.3%\",\n      width: \"96.77%\",\n      margin: \"1.875rem\",\n      \n    }}\n  >\n    <InfiniteScroll\n      scrollableTarget=\"test-table\"\n      dataLength={responseData.length}\n      style={{overflow: \"unset\"}}\n      loader={\n\n        <div className={classes.scrollBox}> \n        <div style={{paddingLeft:pxToRem(6)}}><FacebookCircularProgress/></div>\n        <br/>\n        <div className={classes.loading}>Loading</div>\n          \n        </div>\n      }\n      hasMore={isNext}\n      next={fetchMoreData}\n    >\n        \n        <Table stickyHeader aria-label=\"sticky table\">\n          <EnhancedTableHead\n              classes={classes}\n              numSelected={selected.length}\n              onSelectAllClick={handleSelectAllClick}\n              rowCount={responseData.length}\n            />  \n            <TableBody>\n            {searchResult(responseData).map((row,index)=>{\n               const isItemSelected = isSelected(row.doc_id);\n               const labelId = `enhanced-table-checkbox-${index}`;\n\n                return (\n                  \n                <TableRow \n                  key={index} \n                  hover \n                  onClick={(event) => handleClick(event, row.doc_id)}\n                  role=\"checkbox\"\n                  aria-checked={isItemSelected}\n                  selected={isItemSelected}>\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          checked={isItemSelected}\n                          inputProps={{ \"aria-labelledby\": labelId }}\n                        />\n                      </TableCell>\n                  <TableCell>{row.name_customer}</TableCell>\n                  <TableCell >{row.cust_number}</TableCell>\n                  <TableCell>{row.doc_id}</TableCell>\n                  <TableCell align=\"right\">{formatter(row.total_open_amount)}</TableCell>\n                  <TableCell>{(row.due_in_date<row.clear_date)?row.due_in_date: <span style={{color:\"#FF5B5B\"}}>{row.due_in_date}</span>}</TableCell>\n                  <TableCell align=\"right\" >--</TableCell>\n                  <TableCell>--</TableCell>\n                  <TableCell>{(row.notes?row.notes:\"Lorem Ipsum dolor...\")}</TableCell>\n                </TableRow>\n              )\n            })} \n            </TableBody>\n        </Table>\n    </InfiniteScroll>\n    </TableContainer>\n    </div>\n    )\n}\nexport default InvoiceTable","/home/pratt/Documents/HRC/Summer_Internship_UI/src/services/fetchApi.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/actions/fetchActions.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/reportWebVitals.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/reducers/rootReducer.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/reducers/fetchDataReducer.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/EnhancedTableHead.js",["192"],"import { Checkbox, TableHead, TableCell, TableRow } from '@material-ui/core';\nimport React from 'react'\n\nexport default function EnhancedTableHead(props) {\n    const {\n        classes,\n        onSelectAllClick,\n        rowCount,\n        numSelected} = props;\n\n    return (\n        <TableHead>\n            <TableRow>\n                <TableCell padding=\"checkbox\">\n                    <Checkbox\n                        indeterminate={numSelected > 0 && numSelected < rowCount}\n                        checked={rowCount > 0 && numSelected === rowCount}\n                        onChange={onSelectAllClick}\n                        inputProps={{ \"aria-label\": \"select all Invoices\" }}\n                    />\n                </TableCell>\n                <TableCell>Name Customer</TableCell> \n                <TableCell>Customer #</TableCell>   \n                <TableCell>Bill #</TableCell>\n                <TableCell align=\"right\">Invoice Amount</TableCell>  \n                <TableCell>Due date</TableCell> \n                <TableCell align=\"right\">Predicted Payment Date</TableCell>\n                <TableCell>Predicted Aging Bucket</TableCell> \n                <TableCell>Notes</TableCell> \n            </TableRow>  \n        </TableHead>\n    )\n}\n","/home/pratt/Documents/HRC/Summer_Internship_UI/src/reducers/checkBoxReducer.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/actions/checkboxActions.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/reducers/addFormReducer.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/actions/addFormActions.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/utils/formatter.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/reducers/searchBarReducer.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/actions/searchBarAction.js",[],"/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/NoResults.js",["193"],"import { Button, makeStyles } from '@material-ui/core'\nimport React from 'react'\nimport { useDispatch } from 'react-redux'\nimport { search } from '../actions/searchBarAction'\nimport noResultsFound from '../assets/error_outline-24px.svg'\nimport { pxToRem } from '../utils/theme'\n\nconst useStyles = makeStyles({\n    container: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",  \n        height:\"80%\"\n    },\n    header:{\n        font: `normal normal normal ${pxToRem(22)}/${pxToRem(28)} Ubuntu`,\n        letterSpacing: \"0px\",\n        color: \"#FFFFFF\",\n        opacity: 1,\n        \n    },\n    message:{\n        textAlign: \"center\",\n    },\n    tryAgain:{\n        font: `normal normal normal ${pxToRem(16)}/${pxToRem(24)} Ubuntu`,\n        letterSpacing: \"0px\",\n        color: \"#C0C6CA\",\n        opacity: 1\n    }\n\n\n})\n\n\n\nconst NoResults = ()=> {\n\n    const classes = useStyles()\n    const dispatch = useDispatch()\n\n    const handleClear =()=>{\n        dispatch(search(\"\"))\n    }\n\n    return (\n        <React.Fragment>\n            <div className = {classes.container}>\n                <div className={classes.message}>\n                    <img src={noResultsFound}/>\n                    <br/>      \n                    <p className={classes.header}>\n                        No results found\n                    </p>\n                    <p className={classes.tryAgain}>\n                    Try adjusting your search to find what you are looking for.\n                    </p>\n                    <Button onClick={handleClear} style={{color:\"#14AFF1\"}} >\n                        Clear Search\n                    </Button>\n                </div>\n            </div>\n        </React.Fragment>  \n        \n    )\n}\n\nexport default NoResults\n","/home/pratt/Documents/HRC/Summer_Internship_UI/src/utils/FacebookLoader.js",["194"],"import React from 'react';\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst useStylesFacebook = makeStyles((theme) => ({\n    root: {\n      position: 'relative',\n    },\n    bottom: {\n      color: \"#FFFFFF\",\n    },\n    top: {\n      color: '#1a90ff',\n      animationDuration: '550ms',\n      position: 'absolute',\n      left: 0,\n    },\n    circle: {\n      strokeLinecap: 'round',\n    },\n}));\n\nfunction FacebookCircularProgress(props) {\n    const classes = useStylesFacebook();\n  \n    return (\n      <div className={classes.root}>\n        <CircularProgress\n          variant=\"determinate\"\n          className={classes.bottom}\n          size={50}\n          thickness={2}\n          {...props}\n          value={100}\n        />\n        <CircularProgress\n          variant=\"indeterminate\"\n          disableShrink\n          className={classes.top}\n          classes={{\n            circle: classes.circle,\n          }}\n          size={50}\n          thickness={2}\n          {...props}\n        />\n      </div>\n    );\n  }\nexport default FacebookCircularProgress\n\n","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/CorrespondenceDetails.js",["195"],"import React from 'react'\nimport { Paper, makeStyles, TableContainer, TableCell, TableHead, TableRow, Table, TableBody } from '@material-ui/core'\nimport { pxToRem } from '../utils/theme';\nimport { formatter } from '../utils/formatter';\nimport { useSelector } from 'react-redux';\n\n\nconst useStyles = makeStyles(()=>({\n    message:{\n        textAlign: \"left\",\n        font: `normal normal normal ${pxToRem(20)}/${pxToRem(28)} Ubuntu`,\n        letterSpacing: pxToRem(0.36),\n        opacity: 1,\n        color:\"#C0C6CA\",\n    }\n}))\n\n\nconst CorrespondenceDetails=()=> {\n\n    const selectedRows = useSelector(state=>state.checkBox.selectedRows)\n    const classes = useStyles()\n\n    let totalPay=0\n    selectedRows.map((row)=>{\n        totalPay+=row.total_open_amount\n    })\n\n    console.log(totalPay)\n\n    return (\n        <div className={classes.message}>\n        <p>\n            Subject: <span style={{color:\"#FFFFFF\"}}>{`Invoice Details - {Account Name}`}</span> \n        </p>\n        <p>\n            Dear Sir/Madam,<br/>\n            Greetings!\n        </p>\n        <p>\n            This is to remind you that there are one or more open invoices on your account. \n            Please provide at your earliest convenience an update on the payment details or clarify the reason\n            for the delay. If you have any specific issue with the invoice(s), please let us know so that we can address it to the correct Department.\n        </p>\n        <p>\n            Please find the details of the invoices below:\n        </p>\n        <TableContainer\n            id=\"test-table\"\n            component={Paper}\n            style={{\n            width: \"96.77%\",\n            marginRight: pxToRem(20),\n            // marginLeft:pxToRem(5)\n            }}>\n            <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Bill Id</TableCell> \n                        <TableCell>PO Number</TableCell>   \n                        <TableCell align=\"right\">Invoice Date</TableCell>\n                        <TableCell align=\"right\">Due date</TableCell> \n                        <TableCell align=\"right\">Bill Currency</TableCell>  \n                        <TableCell align=\"right\">Open Amount($)</TableCell> \n                    </TableRow>  \n                </TableHead>\n\n                <TableBody>\n                    {selectedRows.map((row,index)=>{\n                        return (\n                        <TableRow \n                        key={index} \n                        hover>\n                            <TableCell>{row.doc_id}</TableCell>\n                            <TableCell >{row.doc_id}</TableCell>\n                            <TableCell align=\"right\">{row.document_create_date}</TableCell>  \n                            <TableCell align=\"right\">{(row.due_in_date<row.clear_date)?row.due_in_date: <span style={{color:\"#FF5B5B\"}}>{row.due_in_date}</span>}</TableCell>\n                            <TableCell align=\"right\">{row.invoice_currency}</TableCell>\n                            <TableCell align=\"right\">{formatter(row.total_open_amount)}</TableCell>\n                        </TableRow>\n                    )\n                    })} \n                </TableBody>\n            </Table>\n        </TableContainer>\n        <p>\n            Total Open Amount: <span style={{color:\"#FFFFFF\"}}>{`${totalPay}$`}</span>\n        </p>\n        <p>\n        In case you have already made a payment for the above items,\n        please send us the details to ensure the payment is posted.<br/>\n        Let us know if we can be of further assistance. Looking forward to hear from you.\n        </p>\n        <p>\n            Kind Regards,<br/>\n            <span style={{color:\"#FFFFFF\"}}>Pratyush Jena</span><br/>\n            Phone: <span style={{color:\"#FFFFFF\"}}>9425015403</span><br/>\n            Email: <span style={{color:\"#FFFFFF\"}}>1805793@gmail.com</span><br/>\n            HighRadius\n        </p>\n    </div>\n    )\n}\n\nexport default CorrespondenceDetails\n","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/ViewCorrespondence.js",["196","197","198","199","200","201","202","203","204","205","206","207","208","209"],"import React from 'react'\nimport { Select, MenuItem, Paper, Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField, makeStyles, Grid, IconButton, TableContainer, TableCell, TableHead, TableRow, Table, TableBody, FormControl } from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close';\nimport { pxToRem } from '../utils/theme';\nimport { formatter } from '../utils/formatter';\nimport CorrespondenceDetails from './CorrespondenceDetails';\nimport jsPDF from 'jspdf';\nimport AltCorrespondenceDetails from './AltCorrespondenceDetails';\nimport { useSelector } from 'react-redux';\n\n\nconst useStyles = makeStyles(theme=>({\n    dialogBoxPaper:{\n        minWidth:pxToRem(1761),\n        minHeight:pxToRem(755),\n        backgroundColor:\"#2A3E4C\",\n        borderRadius:pxToRem(6),\n    },\n    DialogContent: {\n        margin:pxToRem(20),\n        '&::-webkit-scrollbar': {\n            width: pxToRem(10),\n            height:pxToRem(278)\n            \n          },\n        '&::-webkit-scrollbar-thumb':{\n            background: \"#61707B 0% 0% no-repeat padding-box\",\n            borderRadius: pxToRem(8),\n            marginRight: pxToRem(18) \n        },\n        '&::-webkit-scrollbar-track':{\n            boxShadow:\"0rem\"\n        }\n    },\n\n    dialogTitle:{\n        margin:pxToRem(30),\n        padding:\"0px\"\n    },\n    dropDown:{\n        backgroundColor:\"#283A46\",\n        borderRadius:pxToRem(10),\n        border: `${pxToRem(1)} solid #14AFF1` ,\n    },\n    view:{\n        textAlign: \"left\",\n        font: `normal normal normal ${pxToRem(16)}/${pxToRem(21)} Ubuntu`,\n        letterSpacing: pxToRem(0.33),\n        color: \"#C0C6CA\",\n        opacity: 1\n    },\n\n}))\n\nconst ViewCorrespondence = (props) => {\n\n    const classes = useStyles()\n    const [template, setTemplate] = React.useState(\"Template 1\")\n     const selectedRows = useSelector(state=>state.checkBox.selectedRows)\n\n    console.log(template)\n\n    let total=0\n    selectedRows.map((row)=>{\n        total+=row.total_open_amount\n    })\n\n    function jspdfMaker(){\n        \n        const doc = new jsPDF();\n        doc.setFontSize(10);\n        var heading = \n            `Subject : Order Details \n            \\nDear Sir/Madam,\n            \\nGreetings!\\n\n            This is to remind you that there are one or more open invoices in\n            your account, please provide at your earliest convenience an update\n            on the payment details or clarify the reason for the delay. If you\n            have any specific issue with the invoice(s) , please let us know so\n            that so that we can address it correct department.\n            \\n\n            \\n\n            Please find the details of the invoices below.\\n`\n\n        var string = ''\n\n        function details() {\n            string = string + (`Invoice Number     `)\n            string = string + (` PO Number      `)\n            string = string + (`  Invoice Date                  `)\n            string = string + (`    Due Date                             `)\n            string = string + (`Currency          `)\n            string = string + (`Open Amount($)   \\n`)\n      \n            selectedRows.map((item) => {\n              string = string + (`${String(item.doc_id)}   `)\n              string = string + (`        ${String(item.doc_id)}        `)\n              string = string + (`${(item.clear_date)}        `)\n              string = string + (`          ${String(item.due_in_date)}          `)\n              string = string + (`                     ${String(item.invoice_currency)}       `)\n              string = string + (`        $${String(formatter(item.total_open_amount))}   \\n`)\n            })\n            return string;\n          }\n\n        var totalOpenAmount = `\\n\n            Total Amount To be Paid :$ ${formatter(total)}\\n\n            In case you have already made a payment for the above items,\\n\n            please send us the details to ensure the payment is posted.\\n\n            Let us know if we can be of any assistance. \\n\n            Looking forward to hearing from you.`\n        var footer = `\\n\n            In case you have already made a payment for the above items,\\n\n            please send us the details to ensure the payment is posted.\\n\n            Let us know if we can be of any assistance. \\n\n            Looking forward to hearing from you.`\n        let temp = '1'\n        if (temp === '1')\n        doc.text(heading + details() + totalOpenAmount, 5, 5);\n        else\n        doc.text(heading + details() + footer, 5, 5);\n        doc.save(\"Invoice_Details.pdf\")\n        // eslint-disable-next-line no-restricted-globals\n        location.reload();\n    }\n\n    const handleChange = (event) => {\n        setTemplate(event.target.value);\n    };\n\n\n\n    const {title,viewCorrespondence,setViewCorrespondence}=props\n    return (\n        <div>\n            <Dialog open={viewCorrespondence} classes = {{paper: classes.dialogBoxPaper}}>\n                <DialogTitle className = {classes.dialogTitle} >\n                    <div style={{display:\"flex\"}}>\n                        <div style={{flexGrow:1}}>\n                            {title}\n                        </div>\n\n                        <div>\n                        <span className={classes.view}>View:</span>&nbsp;\n                        <Select\n                            labelId=\"demo-simple-select-label\"\n                            id=\"demo-simple-select\"\n                            value={template}\n                            onChange={handleChange}\n                            style={{width:pxToRem(180),  border: `${pxToRem(1)} solid #14AFF1` }}\n                            MenuProps={{classes:{paper:classes.dropDown}}}\n                            variant=\"outlined\"\n                            >\n                            <MenuItem value={\"Template 1\"}>Template 1</MenuItem>\n                            <MenuItem value={\"Template 2\"}>Template 2</MenuItem>\n                        \n                        </Select>\n                        <Button onClick={()=>{setViewCorrespondence(false)}}>\n                            <CloseIcon/>\n                        </Button>\n                        </div>\n                    </div>\n                </DialogTitle>\n\n                <DialogContent className={classes.DialogContent} dividers>\n                    {template==\"Template 1\"?<CorrespondenceDetails/> : <AltCorrespondenceDetails/>}\n                </DialogContent>\n                <DialogActions style={{paddingBottom:pxToRem(20)}}>\n                    <Button onClick={()=>{setViewCorrespondence(false)}} style={{color:\"#14AFF1\", marginRight:pxToRem(20)}}>\n                        Cancel\n                    </Button>\n                    <Button variant=\"contained\" style={{marginRight:\"1.25rem\"}} onClick={jspdfMaker}>\n                        Download\n                    </Button>\n                </DialogActions>\n            </Dialog> \n        </div>\n    )\n}\n\nexport default ViewCorrespondence\n","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/EditModal.js",["210"],"import React from 'react'\nimport { Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField, makeStyles, Grid, IconButton, Snackbar } from '@material-ui/core'\nimport CloseIcon from '@material-ui/icons/Close';\nimport axios from 'axios';\nimport { useSelector } from 'react-redux';\nimport warningIcon from '../assets/Path 18298.svg'\nimport { pxToRem } from '../utils/theme';\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined';\n\n\n\nconst useStyles = makeStyles((theme)=>({\n    root: {\n        '& .MuiFormControl-root': {\n            width: '94',\n            margin: theme.spacing(2),\n        }\n    },\n    entries: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent:\"space-between\"\n    },\n    label:{\n        textAlign: \"left\",\n        font: \"normal normal normal 1.25rem/1.5rem Ubuntu\",\n        letterSpacing: \"0.19px\",\n        opacity: 1,\n        color:\"#97A1A9\"\n    },\n    dialogBox:{\n        minWidth:\"33.938rem\",\n        minHeight:\"31.938rem\",\n        backgroundColor:\"#2A3E4C\",\n        borderRadius:\"0.375rem\",\n        \n    },\n    dialogTitle:{\n        margin:\"1.875rem\",\n        padding:\"0px\"\n    },\n\n}))\n\n\nconst EditModal= (props)=> {\n\n    const classes = useStyles()\n    const responseData = useSelector(state=>state.fetchData.responseData)\n    const selected = useSelector(state=>state.checkBox.checked)\n\n    const [values,setValues] = React.useState({ billCurrency:\"\",\n                                                notes:\"\"})\n    const{title,editPopup,setEditPopup} = props\n    const [error,setErrors] = React.useState({}) \n    const [message, setMessage] = React.useState(\"\")\n    const [snackOpen, setSnackOpen] = React.useState(false)\n    const [style, setStyle] = React.useState({})\n\n\n    const errorMsg = <div>\n                    <div style={{height:pxToRem(20)}}>\n                        <img src={warningIcon} alt=\"warning\"/>\n                        \n                        <span style={{ marginLeft:pxToRem(11.26) }}>\n                        Mandatory fields can't be empty\n                        </span>   \n                    </div>\n                    </div>\n    \n    const nanMsg = <div>\n                    <div style={{height:pxToRem(20)}}>\n                        <img src={warningIcon} alt=\"warning\"/>\n                        \n                        <span style={{ marginLeft:pxToRem(11.26) }}>\n                        Field(s) should be a number\n                        </span>   \n                    </div>\n                    </div>\n\n    const successMsg = <div>\n                        <div style={{height:pxToRem(20)}}>\n                            <CheckBoxOutlinedIcon style={{color:\"#35CD96\",fontSize:\"large\"}}/>\n                            \n                            <span style={{ marginLeft:pxToRem(11.26) }}>\n                            Editing Successful\n                            </span>   \n                        </div>\n                        </div>\n\n\n    const handleClick=()=>{\n        setSnackOpen(true)\n    }\n\n    const handleClose = (event,reason) =>{\n        if (reason===\"clickaway\"){\n            return\n        }\n        setSnackOpen(false)\n    }\n\n\n    const handleInputChange= e=>{\n        const{name,value} = e.target\n        setValues({\n            ...values,\n            [name]:value\n        })\n    }\n\n    function handleSubmit(){\n        const Bill_Currency = values.billCurrency\n        const Note = values.notes\n        const Bill_Id = selected[0]\n        \n\n        const user = {Bill_Currency,Note,Bill_Id}\n\n        console.log(user)\n        console.log(JSON.stringify(user))\n        if (Bill_Currency===\"\"){\n            console.log(\"Parameters cant be empty\")\n        }\n        else{\n              axios.post(\"http://localhost:8080/Summer_Internship_Backend/editData\",null, {params : {data: JSON.stringify(user)}})\n        }\n    }\n\n    const handleClear=()=>{\n        setValues({\n            billCurrency : \"\",\n            notes : \"\"\n        })\n    }\n\n\n    const validate = () =>{\n        let temp = {}\n        temp.billCurrency = (values.billCurrency)&&(!isNaN(values.billCurrency))?\"\":\"This field is required\"\n        setErrors({\n            ...temp\n        })\n        return Object.values(temp).every(x => x==\"\")\n    }\n\n\n    const validateSubmit = (e)=>{\n        if(validate()){\n            handleSubmit()\n            setStyle({borderLeft: `${pxToRem(4.91)} solid #35CD96`})\n            setMessage(successMsg)}\n        else{\n            setMessage(isNaN(values.billCurrency)?nanMsg:errorMsg)\n            setStyle({borderLeft: `${pxToRem(4.91)} solid #FF5B5B`})\n            e.preventDefault()\n        }\n    }\n\n    const closeButton = () => {\n        handleClear()\n        setErrors({})\n        setEditPopup(false)\n        setSnackOpen(false)\n        \n    }\n    // console.log(selected[0])\n\n\n    \n    return (\n        <div>\n            <Dialog open={editPopup} classes = {{paper: classes.dialogBox}}>\n                <DialogTitle className = {classes.dialogTitle}>\n                    <div style={{display:\"flex\"}}>\n                        <div style={{flexGrow:1}}>\n                            {title}\n                        </div>\n                        <Button onClick={closeButton}>\n                            <CloseIcon/>\n                        </Button>\n                    </div>\n                </DialogTitle>\n\n                \n                \n\n                <form className = {classes.root} onSubmit={validateSubmit}>\n                    <DialogContent style={{ overflow: \"hidden\" }} dividers>\n                        <div className={classes.entries}>\n                            <label className = {classes.label}>Invoice Amount</label>\n                                <TextField\n                                    variant=\"outlined\"\n                                    name=\"billCurrency\"\n                                    autoComplete=\"off\"\n                                    value={values.billCurrency}\n                                    onChange = {handleInputChange}\n                                    placeholder = {(selected.length===1)?((responseData.find(o=>o.doc_id===selected[0])).total_open_amount):\"\"}\n                                    error = {error.billCurrency}\n                                />\n                        </div>\n\n                        <div className={classes.entries}>\n                            <label className = {classes.label}>Notes</label>\n                                <TextField\n                                    variant=\"outlined\"\n                                    name=\"notes\"\n                                    multiline\n                                    autoComplete=\"off\"\n                                    value={values.notes}\n                                    onChange = {handleInputChange}\n                                    placeholder = \"Lorem Ipsum dolor...\"\n                                />\n                        </div>\n                    </DialogContent>\n\n\n                    \n                    \n                    \n                    <DialogActions style={{padding:\"1.875rem\"}} dividers>\n                        <Grid justify=\"space-between\" container spacing={0}>\n                            <Grid item>\n                                <Button onClick={()=>{setEditPopup(false)}} style={{color:\"#14AFF1\"}}>\n                                    Cancel\n                                </Button>\n                            </Grid>\n\n                            <Grid item justify=\"space-between\">\n                                <div>\n\n                                <Snackbar\n                                    anchorOrigin={{\n                                            vertical: \"bottom\",\n                                            horizontal: \"left\",\n                                        }}\n                                    open={snackOpen}\n                                    autoHideDuration={3000}\n                                    style={style}\n                                    onClose={handleClose}\n                                    message={message}\n                                    action = {\n                                        <IconButton onClick={handleClose}>\n                                            <CloseIcon style={{color:\"#FFFFFF\"}}/>\n                                        </IconButton>}\n                                    />\n\n\n                                    <Button variant=\"contained\" style={{marginRight:\"1.25rem\"}} type = \"submit\" onClick={handleClick}>\n                                        Edit\n                                    </Button>\n                                    <Button variant=\"outlined\" onClick={handleClear}>\n                                        Clear\n                                    </Button>\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </DialogActions>\n                </form>\n            </Dialog>\n        </div>\n    )\n}\n\nexport default EditModal\n\n","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/DeleteModal.js",["211"],"import { Button, Dialog, DialogActions, DialogContent, DialogTitle, makeStyles, Grid, Snackbar, IconButton } from '@material-ui/core'\nimport React from 'react'\nimport CloseIcon from '@material-ui/icons/Close';\nimport { useSelector } from 'react-redux';\nimport axios from 'axios';\nimport warningIcon from '../assets/Path 18298.svg'\nimport { pxToRem } from '../utils/theme';\n\nconst useStyles = makeStyles({\n    dialogBox:{\n        minWidth:\"38.199rem\",\n        minHeight:\"21.375rem\",\n        backgroundColor:\"#2A3E4C\",\n        borderRadius:\"0.375rem\",\n        \n    },\n    dialogTitle:{\n        margin:\"1.875rem\",\n        padding:\"0px\"\n    },\n    dialogContent:{\n        textAlign: \"left\",\n        font: \"normal normal normal 1.25rem/1.5rem Ubuntu\",\n        letterSpacing: \"0.012rem\",\n        opacity: 1,\n        color:\"#97A1A9\",\n    }\n})\n\nfunction DeleteModal(props) {\n\n    const classes = useStyles()\n    const selected = useSelector(state=>state.checkBox.checked)\n    const [snackOpen, setSnackOpen] = React.useState(false)\n    const [message, setMessage] = React.useState(\"\")\n    \n    const deleteMsg = <div>\n                        <div style={{height:pxToRem(20)}}>\n                            <img src={warningIcon} alt=\"warning\"/>\n                            \n                            <span style={{ marginLeft:pxToRem(11.26) }}>\n                            {selected.length} items Deleted\n                            </span>   \n                        </div>\n                    </div>\n\n\n    const handleClick=()=>{\n        setSnackOpen(true)\n    }\n\n    const handleClose = (event,reason) =>{\n        if (reason===\"clickaway\"){\n            return\n        }\n        setSnackOpen(false)\n    }\n    \n    function handleSubmit(){\n        const Bill_Id_array = `(${selected.toString()})`\n\n        const user = {Bill_Id_array}\n        axios\n            .post(\"http://localhost:8080/Summer_Internship_Backend/deleteData\",null, {params : {data: JSON.stringify(user)}})\n            \n            .catch((error)=>{\n                console.log(error)\n            })\n        \n            setMessage(deleteMsg)\n        }\n    \n\n    const closeButton = () => {\n        setDeletePopup(false)\n        setSnackOpen(false)\n        \n    }\n\n\n\n\n    console.log(selected.toString())\n    console.log(`(${selected.toString()})`)\n\n    const{title,deletePopup,setDeletePopup} = props\n    return (\n        <div>\n            <Dialog open={deletePopup} classes = {{paper: classes.dialogBox}}>\n                <DialogTitle className = {classes.dialogTitle}>\n                    <div style={{display:\"flex\"}}>\n                        <div style={{flexGrow:1}}>\n                            {title}\n                        </div>\n                        <Button onClick={closeButton}>\n                            <CloseIcon/>\n                        </Button>\n                    </div>\n                </DialogTitle>\n\n\n                <form onSubmit={handleSubmit}>\n                    <DialogContent className={classes.dialogContent} style={{overflow: \"hidden\"}} dividers>\n                        <div>\n                            <p>\n                            You'll lose {selected.length} {(selected.length>1)?\"records\":\"record\"} after this action. We can't recover them once you delete. \n                            </p>\n                            <p>\n                            Are you sure you want to <span style={{color:\"#FF5E5E\"}}>permanently delete</span> them?\n                            </p>\n                        </div>\n                    </DialogContent>\n                    \n                    <DialogActions style={{padding:\"1.875rem\"}} dividers>\n                        <div>\n                            <Button variant=\"outlined\" style={{marginRight:\"1.25rem\"}} onClick={()=>{setDeletePopup(false)}}>\n                                Cancel\n                            </Button>\n\n                            <Snackbar\n                                anchorOrigin={{\n                                        vertical: \"bottom\",\n                                        horizontal: \"left\",\n                                    }}\n                                open={snackOpen}\n                                autoHideDuration={3000}\n                                style={{borderLeft: `${pxToRem(4.91)} solid #FF5B5B`}}\n                                onClose={handleClose}\n                                message={message}\n                                action = {\n                                    <IconButton onClick={handleClose}>\n                                        <CloseIcon style={{color:\"#FFFFFF\"}}/>\n                                    </IconButton>}\n                                />\n\n                            <Button variant=\"contained\" type=\"submit\" onClick={handleClick}>\n                                Delete\n                            </Button>\n                        </div>\n                    </DialogActions>\n                </form>\n            </Dialog>\n        </div>\n    )\n}\n\nexport default DeleteModal\n","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/AddModal.js",["212","213"],"import { Snackbar, Button, Dialog, DialogActions, DialogContent, DialogTitle, TextField, makeStyles, Grid, IconButton } from '@material-ui/core'\nimport React from 'react'\nimport CloseIcon from '@material-ui/icons/Close';\nimport axios from 'axios';\nimport theme, { pxToRem } from '../utils/theme'\nimport DatePicker from './DatePicker'\nimport warningIcon from '../assets/Path 18298.svg'\nimport CheckBoxOutlinedIcon from '@material-ui/icons/CheckBoxOutlined';\n\n\n\nconst useStyles = makeStyles((theme)=>({\n    root: {\n        '& .MuiFormControl-root': {\n            width: '94',\n            margin: theme.spacing(2),\n        }\n    },\n    entries: {\n        display: \"flex\",\n        alignItems: \"center\",\n        justifyContent:\"space-between\"\n    },\n    label:{\n        textAlign: \"left\",\n        font: \"normal normal normal 1.2rem/1.5rem Ubuntu\",\n        letterSpacing: 0,\n        opacity: 1,\n        color:\"#97A1A9\"\n    },\n    dialogBox:{\n        minWidth:\"69.125rem\",\n        minHeight:\"31.813rem\",\n        backgroundColor:\"#2A3E4C\",\n        borderRadius:\"0.375rem\",\n        \n    },\n    dialogTitle:{\n        margin:\"1.875rem\",\n        padding:\"0px\"\n    },\n\n}))\n\n\nconst AddModal= (props)=> {\n\n    const classes = useStyles()\n\n    const{title,addPopup,setAddPopup} = props\n    const [values,setValues] = React.useState({customerName:\"\",\n                                                customerNo:\"\",\n                                                billId:\"\",\n                                                billCurrency:\"\",\n                                                dueDate:new Date(),\n                                                notes:\"\"\n                                            })\n    \n    const [error,setErrors] = React.useState({})\n    const [message, setMessage] = React.useState(\"\")\n    const [snackOpen, setSnackOpen] = React.useState(false)\n    const [style, setStyle] = React.useState({})\n    \n    const errorMsg = <div>\n                    <div style={{height:pxToRem(20)}}>\n                        <img src={warningIcon} alt=\"warning\"/>\n                        \n                        <span style={{ marginLeft:pxToRem(11.26) }}>\n                        Mandatory fields can't be empty\n                        </span>   \n                    </div>\n                    </div>\n\n    const nanMsg = <div>\n                    <div style={{height:pxToRem(20)}}>\n                        <img src={warningIcon} alt=\"warning\"/>\n                        \n                        <span style={{ marginLeft:pxToRem(11.26) }}>\n                        Field(s) should be a number\n                        </span>   \n                    </div>\n                    </div>\n                    \n    const successMsg = <div>\n                        <div style={{height:pxToRem(20)}}>\n                            <CheckBoxOutlinedIcon style={{color:\"#35CD96\",fontSize:\"large\"}}/>\n                            \n                            <span style={{ marginLeft:pxToRem(11.26) }}>\n                            Addition Successful\n                            </span>   \n                        </div>\n                        </div>\n\n    \n    \n    const handleClick=()=>{\n        setSnackOpen(true)\n    }\n\n    const handleClose = (reason) =>{\n        if (reason===\"clickaway\"){\n            return\n        }\n        setSnackOpen(false)\n    }\n\n\n    const handleInputChange= e=>{\n        const{name,value} = e.target\n        setValues({\n            ...values,\n            [name]:value\n        })\n    }\n\n    function handleSubmit(){\n        const Cust_name = values.customerName\n        const Cust_No = values.customerNo\n        const Bill_Id = values.billId\n        const Bill_Currency = values.billCurrency\n        const Due_Date = values.dueDate\n        const Note = values.notes\n\n        const user = {Cust_name,Cust_No,Bill_Id,Bill_Currency,Due_Date,Note}\n\n        if (Cust_name===\"\"||Cust_No===\"\"||Bill_Id===\"\"||Bill_Currency===\"\"||Due_Date===\"\"){\n            console.log(\"Parameters cant be empty\")\n        }\n        else{\n              axios.post(\"http://localhost:8080/Summer_Internship_Backend/addData\",null, {params : {data: JSON.stringify(user)}})\n        }\n    }\n\n    const handleClear=()=>{\n        setValues({\n            customerName:\"\",\n            customerNo : \"\",\n            billId : \"\",\n            billCurrency : \"\",\n            dueDate : new Date(),\n            notes : \"\"\n        })\n    }\n\n    const validate = () =>{\n        let temp = {}\n        temp.customerName = values.customerName?\"\":\"This field is required\"\n        temp.customerNo = values.customerNo?\"\":\"This field is required\"\n        temp.billId = (values.billId)&&(!isNaN(values.billId))?\"\":\"This field is required\"\n        temp.billCurrency = (values.billCurrency)&&(!isNaN(values.billCurrency))?\"\":\"This field is required\"\n        temp.dueDate = values.dueDate?\"\":\"This field is required\"\n        setErrors({\n            ...temp\n        })\n        return Object.values(temp).every(x => x==\"\")\n    }\n\n\n    const validateSubmit = (e)=>{\n        if(validate()){\n            handleSubmit()\n            setMessage(successMsg)\n            setStyle({borderLeft: `${pxToRem(4.91)} solid #35CD96`})\n        }\n        else{\n            setMessage((isNaN(values.billId)||isNaN(values.billCurrency))?nanMsg:errorMsg)\n            setStyle({borderLeft: `${pxToRem(4.91)} solid #FF5B5B`})\n            e.preventDefault()\n        }\n    }\n\n    const closeButton = () => {\n        handleClear()\n        setErrors({})\n        setAddPopup(false)\n        setSnackOpen(false)\n        \n    }\n\n\n   \n    return (\n        <div>\n            <Dialog open={addPopup} classes = {{paper: classes.dialogBox}}>\n                <DialogTitle className = {classes.dialogTitle}>\n                    <div style={{display:\"flex\"}}>\n                        <div style={{flexGrow:1}}>\n                            {title}\n                        </div>\n\n\n                        <Button onClick={closeButton}>\n                            <CloseIcon/>\n                        </Button>\n                    </div>\n                </DialogTitle>\n\n\n                <form className = {classes.root} onSubmit={validateSubmit}>\n                    <DialogContent style={{ overflow: \"hidden\" }} dividers>\n                        <Grid container spacing = {10}>\n                            <Grid item xs = {6} alignItems=\"baseline\">\n                                <div className={classes.entries}>\n                                <label className = {classes.label}>Customer Name <span style={{color:\"#FF5B5B\"}}>*</span></label>\n                                <TextField\n                                    variant=\"outlined\"\n                                    name=\"customerName\"\n                                    autoComplete=\"off\"\n                                    value={values.customerName}\n                                    onChange = {handleInputChange}\n                                    error = {error.customerName}\n                                />\n                                </div> \n\n                                <div className={classes.entries}>\n                                <label className = {classes.label}>Customer No <span style={{color:\"#FF5B5B\"}}>*</span></label>\n                                <TextField\n                                    variant=\"outlined\"\n                                    name=\"customerNo\"\n                                    autoComplete=\"off\"\n                                    value={values.customerNo}\n                                    onChange = {handleInputChange}\n                                    error = {error.customerNo}\n                                />  \n                                </div>\n\n                                <div className={classes.entries}>\n                                <label className = {classes.label}>Bill Id <span style={{color:\"#FF5B5B\"}}>*</span></label>\n                                <TextField\n                                    variant=\"outlined\"\n                                    name=\"billId\"\n                                    autoComplete=\"off\"\n                                    value={values.billId}\n                                    onChange = {handleInputChange}\n                                    error = {error.billId}\n                                    \n                                />\n                                </div>\n\n                                <div className={classes.entries}>\n                                <label className = {classes.label}>Invoice Amount <span style={{color:\"#FF5B5B\"}}>*</span></label>\n                                <TextField\n                                    variant=\"outlined\"\n                                    name=\"billCurrency\"\n                                    autoComplete=\"off\"\n                                    value={values.billCurrency}\n                                    onChange = {handleInputChange}\n                                    error = {error.billCurrency}\n                                />\n                                </div>\n                            </Grid>\n                            <Grid item xs = {6}>\n                                <div className={classes.entries}>\n                                <label className = {classes.label}>Due Date <span style={{color:\"#FF5B5B\"}}>*</span></label>   \n                                <DatePicker\n                                    name=\"dueDate\"\n                                    value={values.dueDate}\n                                    onChange = {handleInputChange}\n                                    error = {error.dueDate}\n                                />\n                                </div>\n\n                                <div className={classes.entries}>\n                                <label className = {classes.label}>Notes</label>\n                                <TextField\n                                    variant=\"outlined\"\n                                    name=\"notes\"\n                                    multiline\n                                    autoComplete=\"off\"\n                                    value={values.notes}\n                                    onChange = {handleInputChange}\n                                    placeholder = \"Lorem Ipsum dolor...\"\n                                />\n                                </div>\n                            </Grid>\n                        </Grid>                        \n                    </DialogContent>\n\n\n                    <DialogActions style={{padding:\"1.875rem\"}} dividers>\n                        <Grid justify=\"space-between\" container spacing={0}>\n                            <Grid item>\n                                <Button onClick={()=>{setAddPopup(false)}} style={{color:\"#14AFF1\"}} >\n                                    Cancel\n                                </Button>\n                            </Grid>\n\n                            <Grid item justify=\"space-between\">\n                                <div>\n                                \n                                \n                                <Snackbar\n                                    anchorOrigin={{\n                                            vertical: \"bottom\",\n                                            horizontal: \"left\",\n                                        }}\n                                        open={snackOpen}\n                                        style={style}\n                                        autoHideDuration={3000}\n                                        onClose={handleClose}\n                                        message={message}\n                                        action = {\n                                            <IconButton onClick={handleClose}>\n                                                <CloseIcon style={{color:\"#FFFFFF\"}}/>\n                                            </IconButton>\n                                        }/>\n\n\n                                    <Button variant=\"contained\" style={{marginRight:\"1.25rem\"}} type = \"submit\" onClick={handleClick}>\n                                        Add\n                                    </Button>\n                                    <Button variant=\"outlined\" onClick={handleClear}>\n                                        Clear\n                                    </Button>\n                                </div>\n                            </Grid>\n                        </Grid>\n                    </DialogActions>\n                </form>\n            </Dialog>\n        </div>\n    )\n}\n\nexport default AddModal\n","/home/pratt/Documents/HRC/Summer_Internship_UI/src/components/AltCorrespondenceDetails.js",["214"],"import React from 'react'\nimport { Paper, makeStyles, TableContainer, TableCell, TableHead, TableRow, Table, TableBody } from '@material-ui/core'\nimport { pxToRem } from '../utils/theme';\nimport { formatter } from '../utils/formatter';\nimport { useSelector } from 'react-redux';\n\n\nconst useStyles = makeStyles(()=>({\n    message:{\n        textAlign: \"left\",\n        font: `normal normal normal ${pxToRem(20)}/${pxToRem(28)} Ubuntu`,\n        letterSpacing: pxToRem(0.36),\n        opacity: 1,\n        color:\"#C0C6CA\",\n    }\n}))\n\n// const sumInvoiceAmount = () =>{\n//     selectedRows.map((row)=>{\n//         return (\n//             sum = \n//         )\n//     })\n// }\nconst AltCorrespondenceDetails=()=> {\n\n    const selectedRows = useSelector(state=>state.checkBox.selectedRows)\n    const classes = useStyles()\n\n    let totalPay=0\n    selectedRows.map((row)=>{\n        totalPay+=row.total_open_amount\n    })\n\n    return (\n        <div className={classes.message}>\n        <p>\n            Subject: <span style={{color:\"#FFFFFF\"}}>{`Invoice Details - {Account Name}`}</span> \n        </p>\n        <p>\n            Dear Sir/Madam,<br/>\n            Greetings!\n        </p>\n        <p>\n            Gentle Reminder that you have {`${selectedRows.length}`} open invoices on your account.<br/>\n            Please get back to us with an expected date of payment. If you have any specific issue with the invoice please let us know\n            at the earliest so that we can address the issue.\n        </p>\n        <p>\n            Please find the details of the invoices below:\n        </p>\n        <TableContainer\n            id=\"test-table\"\n            component={Paper}\n            style={{\n            width: \"96.77%\",\n            marginRight: pxToRem(20),\n            // marginLeft:pxToRem(5)\n            }}>\n            <Table stickyHeader aria-label=\"sticky table\">\n                <TableHead>\n                    <TableRow>\n                        <TableCell>Bill Id</TableCell> \n                        <TableCell>PO Number</TableCell>   \n                        <TableCell align=\"right\">Invoice Date</TableCell>\n                        <TableCell align=\"right\">Due date</TableCell> \n                        <TableCell align=\"right\">Bill Currency</TableCell>  \n                        <TableCell align=\"right\">Open Amount($)</TableCell> \n                    </TableRow>  \n                </TableHead>\n\n                <TableBody>\n                    {selectedRows.map((row,index)=>{\n                        return (\n                        <TableRow \n                        key={index} \n                        hover>\n                            <TableCell>{row.doc_id}</TableCell>\n                            <TableCell >{row.doc_id}</TableCell>\n                            <TableCell align=\"right\">{row.document_create_date}</TableCell>  \n                            <TableCell align=\"right\">{(row.due_in_date<row.clear_date)?row.due_in_date: <span style={{color:\"#FF5B5B\"}}>{row.due_in_date}</span>}</TableCell>\n                            <TableCell align=\"right\">{row.invoice_currency}</TableCell>\n                            <TableCell align=\"right\">{formatter(row.total_open_amount)}</TableCell>\n                        </TableRow>\n                    )\n                    })} \n                </TableBody>\n            </Table>\n        </TableContainer>\n        <p>\n            Total Open Amount: <span style={{color:\"#FFFFFF\"}}>{`${totalPay}$`}</span>\n        </p>\n        <p>\n            In case you have already made a payment for the above items,\n            please send us the details to ensure the payment is posted.<br/>\n            Let us know if we can be of further assistance. Looking forward to hear from you.\n        </p>\n        <p>\n            Kind Regards,<br/>\n            <span style={{color:\"#FFFFFF\"}}>Pratyush Jena</span><br/>\n            Phone: <span style={{color:\"#FFFFFF\"}}>9425015403</span><br/>\n            Email: <span style={{color:\"#FFFFFF\"}}>1805793@gmail.com</span><br/>\n            HighRadius\n        </p>\n    </div>\n    )\n}\n\nexport default AltCorrespondenceDetails\n",{"ruleId":"215","severity":1,"message":"216","line":8,"column":10,"nodeType":"217","messageId":"218","endLine":8,"endColumn":20},{"ruleId":"219","replacedBy":"220"},{"ruleId":"221","replacedBy":"222"},{"ruleId":"219","replacedBy":"223"},{"ruleId":"221","replacedBy":"224"},{"ruleId":"215","severity":1,"message":"225","line":2,"column":8,"nodeType":"217","messageId":"218","endLine":2,"endColumn":13},{"ruleId":"215","severity":1,"message":"226","line":2,"column":17,"nodeType":"217","messageId":"218","endLine":2,"endColumn":23},{"ruleId":"215","severity":1,"message":"227","line":7,"column":10,"nodeType":"217","messageId":"218","endLine":7,"endColumn":19},{"ruleId":"215","severity":1,"message":"228","line":7,"column":32,"nodeType":"217","messageId":"218","endLine":7,"endColumn":45},{"ruleId":"229","severity":1,"message":"230","line":172,"column":32,"nodeType":"231","messageId":"232","endLine":172,"endColumn":34},{"ruleId":"215","severity":1,"message":"233","line":2,"column":8,"nodeType":"217","messageId":"218","endLine":2,"endColumn":13},{"ruleId":"215","severity":1,"message":"225","line":3,"column":8,"nodeType":"217","messageId":"218","endLine":3,"endColumn":13},{"ruleId":"215","severity":1,"message":"234","line":32,"column":11,"nodeType":"217","messageId":"218","endLine":32,"endColumn":18},{"ruleId":"235","severity":1,"message":"236","line":34,"column":17,"nodeType":"237","endLine":34,"endColumn":77},{"ruleId":"235","severity":1,"message":"236","line":36,"column":17,"nodeType":"237","endLine":36,"endColumn":77},{"ruleId":"215","severity":1,"message":"238","line":2,"column":21,"nodeType":"217","messageId":"218","endLine":2,"endColumn":27},{"ruleId":"215","severity":1,"message":"239","line":2,"column":10,"nodeType":"217","messageId":"218","endLine":2,"endColumn":16},{"ruleId":"215","severity":1,"message":"240","line":2,"column":18,"nodeType":"217","messageId":"218","endLine":2,"endColumn":22},{"ruleId":"219","replacedBy":"241"},{"ruleId":"221","replacedBy":"242"},{"ruleId":"215","severity":1,"message":"243","line":4,"column":68,"nodeType":"217","messageId":"218","endLine":4,"endColumn":84},{"ruleId":"215","severity":1,"message":"244","line":49,"column":11,"nodeType":"217","messageId":"218","endLine":49,"endColumn":23},{"ruleId":"245","severity":1,"message":"246","line":82,"column":26,"nodeType":"247","messageId":"248","endLine":82,"endColumn":28},{"ruleId":"229","severity":1,"message":"230","line":83,"column":58,"nodeType":"231","messageId":"232","endLine":83,"endColumn":60},{"ruleId":"229","severity":1,"message":"230","line":110,"column":22,"nodeType":"231","messageId":"232","endLine":110,"endColumn":24},{"ruleId":"215","severity":1,"message":"249","line":121,"column":11,"nodeType":"217","messageId":"218","endLine":121,"endColumn":25},{"ruleId":"250","severity":1,"message":"251","line":136,"column":8,"nodeType":"252","endLine":136,"endColumn":10,"suggestions":"253"},{"ruleId":"215","severity":1,"message":"234","line":6,"column":9,"nodeType":"217","messageId":"218","endLine":6,"endColumn":16},{"ruleId":"235","severity":1,"message":"236","line":50,"column":21,"nodeType":"237","endLine":50,"endColumn":48},{"ruleId":"215","severity":1,"message":"216","line":2,"column":22,"nodeType":"217","messageId":"218","endLine":2,"endColumn":32},{"ruleId":"245","severity":1,"message":"246","line":25,"column":27,"nodeType":"247","messageId":"248","endLine":25,"endColumn":29},{"ruleId":"215","severity":1,"message":"233","line":2,"column":28,"nodeType":"217","messageId":"218","endLine":2,"endColumn":33},{"ruleId":"215","severity":1,"message":"254","line":2,"column":94,"nodeType":"217","messageId":"218","endLine":2,"endColumn":103},{"ruleId":"215","severity":1,"message":"255","line":2,"column":117,"nodeType":"217","messageId":"218","endLine":2,"endColumn":121},{"ruleId":"215","severity":1,"message":"256","line":2,"column":123,"nodeType":"217","messageId":"218","endLine":2,"endColumn":133},{"ruleId":"215","severity":1,"message":"257","line":2,"column":135,"nodeType":"217","messageId":"218","endLine":2,"endColumn":149},{"ruleId":"215","severity":1,"message":"258","line":2,"column":151,"nodeType":"217","messageId":"218","endLine":2,"endColumn":160},{"ruleId":"215","severity":1,"message":"259","line":2,"column":162,"nodeType":"217","messageId":"218","endLine":2,"endColumn":171},{"ruleId":"215","severity":1,"message":"260","line":2,"column":173,"nodeType":"217","messageId":"218","endLine":2,"endColumn":181},{"ruleId":"215","severity":1,"message":"261","line":2,"column":183,"nodeType":"217","messageId":"218","endLine":2,"endColumn":188},{"ruleId":"215","severity":1,"message":"262","line":2,"column":190,"nodeType":"217","messageId":"218","endLine":2,"endColumn":199},{"ruleId":"215","severity":1,"message":"263","line":2,"column":201,"nodeType":"217","messageId":"218","endLine":2,"endColumn":212},{"ruleId":"245","severity":1,"message":"246","line":64,"column":27,"nodeType":"247","messageId":"248","endLine":64,"endColumn":29},{"ruleId":"245","severity":1,"message":"246","line":95,"column":37,"nodeType":"247","messageId":"248","endLine":95,"endColumn":39},{"ruleId":"229","severity":1,"message":"230","line":166,"column":30,"nodeType":"231","messageId":"232","endLine":166,"endColumn":32},{"ruleId":"229","severity":1,"message":"230","line":144,"column":48,"nodeType":"231","messageId":"232","endLine":144,"endColumn":50},{"ruleId":"215","severity":1,"message":"255","line":1,"column":81,"nodeType":"217","messageId":"218","endLine":1,"endColumn":85},{"ruleId":"215","severity":1,"message":"225","line":5,"column":8,"nodeType":"217","messageId":"218","endLine":5,"endColumn":13},{"ruleId":"229","severity":1,"message":"230","line":155,"column":48,"nodeType":"231","messageId":"232","endLine":155,"endColumn":50},{"ruleId":"245","severity":1,"message":"246","line":31,"column":27,"nodeType":"247","messageId":"248","endLine":31,"endColumn":29},"no-unused-vars","'withStyles' is defined but never used.","Identifier","unusedVar","no-native-reassign",["264"],"no-negated-in-lhs",["265"],["264"],["265"],"'theme' is defined but never used.","'pxToVh' is defined but never used.","'InputBase' is defined but never used.","'OutlinedInput' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Paper' is defined but never used.","'classes' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Button' is defined but never used.","'colors' is defined but never used.","'Icon' is defined but never used.",["264"],["265"],"'CircularProgress' is defined but never used.","'selectedRows' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'dateConversion' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'dispatch' and 'fetchMoreData'. Either include them or remove the dependency array.","ArrayExpression",["266"],"'TextField' is defined but never used.","'Grid' is defined but never used.","'IconButton' is defined but never used.","'TableContainer' is defined but never used.","'TableCell' is defined but never used.","'TableHead' is defined but never used.","'TableRow' is defined but never used.","'Table' is defined but never used.","'TableBody' is defined but never used.","'FormControl' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"267","fix":"268"},"Update the dependencies array to be: [dispatch, fetchMoreData]",{"range":"269","text":"270"},[4321,4323],"[dispatch, fetchMoreData]"]